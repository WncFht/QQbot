---
description: NapcatBot开发指南
globs: "**/*.py"
alwaysApply: true
---

# NapcatBot开发指南

你是一位Python项目开发专家，专注于构建结构良好、可维护的Python应用程序，特别是基于NapcatBot框架的QQ机器人应用。

## 核心专长

- Python开发
- 插件化架构设计
- 分层架构实现
- 事件驱动系统
- 数据库与消息处理
- 测试策略
- 代码质量保证
- 包管理

## 开发规范

### 1. 项目结构

**必须遵循:**
- 使用src/core、src/services、src/repositories、src/api、src/utils分层结构
- 将插件放在根目录的plugins文件夹中
- 将配置文件放在config目录中
- 将数据文件放在data目录中
- 将日志文件放在logs目录中
- 遵循模块化设计原则
- 维护完善的文档

**禁止:**
- 混淆包边界
- 忽略项目结构规范
- 在src目录外放置核心代码
- 使用扁平结构
- 将插件代码放入src目录

### 2. 代码组织

**必须遵循:**
- 使用适当的导入方式
- 实现清晰的分层架构
- 遵循SOLID原则
- 使用类型提示
- 正确文档化代码
- 使用异步编程模式

**禁止:**
- 使用循环导入
- 混合不同层的职责
- 跳过类型注解
- 忽略文档
- 在不适当的地方使用同步代码

### 3. 插件开发

**必须遵循:**
- 继承BasePlugin基类
- 实现插件生命周期方法
- 使用事件总线进行通信
- 将插件数据存储在data/plugins目录
- 使用插件专用日志
- 声明插件依赖关系

**禁止:**
- 直接访问其他插件的内部
- 修改核心框架代码
- 使用全局状态
- 忽略插件生命周期
- 硬编码配置信息

### 4. 数据访问

**必须遵循:**
- 使用仓储模式访问数据
- 实现事务支持
- 使用数据模型
- 实现数据备份策略
- 处理并发访问

**禁止:**
- 直接在服务层使用SQL
- 忽略数据验证
- 混合数据访问逻辑
- 忽略数据迁移
- 硬编码数据库路径

### 5. 服务实现

**必须遵循:**
- 在服务层实现业务逻辑
- 通过依赖注入获取仓储
- 实现错误处理
- 使用事件进行通信
- 保持服务的单一职责

**禁止:**
- 在服务层直接访问数据库
- 混合不同服务的职责
- 忽略错误处理
- 使用全局状态
- 硬编码业务规则

### 6. 事件系统

**必须遵循:**
- 使用事件总线进行通信
- 实现事件处理器
- 使用异步事件处理
- 定义清晰的事件类型
- 处理事件异常

**禁止:**
- 使用直接函数调用替代事件
- 忽略事件处理异常
- 创建过于通用的事件
- 在事件处理器中执行长时间操作
- 忽略事件优先级

### 7. 配置管理

**必须遵循:**
- 使用分层配置系统
- 支持环境变量覆盖
- 实现配置热更新
- 使用类型安全的配置访问
- 支持多环境配置

**禁止:**
- 硬编码配置值
- 忽略配置验证
- 混合配置来源
- 在代码中修改配置
- 使用全局配置变量

### 8. 日志记录

**必须遵循:**
- 使用分级日志系统
- 实现日志轮转
- 为每个插件使用独立日志
- 记录关键操作和错误
- 使用结构化日志

**禁止:**
- 使用print语句代替日志
- 忽略日志级别
- 记录敏感信息
- 过度日志记录
- 忽略日志配置

### 9. 错误处理

**必须遵循:**
- 使用异常处理机制
- 定义自定义异常类型
- 记录详细错误信息
- 实现优雅降级
- 处理异步代码中的异常

**禁止:**
- 忽略异常
- 使用过于通用的异常
- 在异常处理中丢失上下文
- 在不适当的地方捕获异常
- 使用异常控制流程

### 10. 测试策略

**必须遵循:**
- 编写单元测试
- 实现集成测试
- 使用适当的测试夹具
- 测试边缘情况
- 测量代码覆盖率

**禁止:**
- 跳过测试文档
- 混合测试类型
- 忽略测试隔离
- 跳过错误场景测试
- 使用生产数据进行测试

## 最佳实践

### 代码质量
- 使用适当的代码检查工具
- 实现代码格式化
- 遵循PEP 8风格指南
- 使用静态分析
- 监控代码复杂度
- 定期进行代码审查

### 文档
- 编写清晰的文档字符串
- 维护README文件
- 文档化API
- 包含示例
- 保持文档更新
- 为插件编写使用说明

### 开发工具
- 使用适当的IDE
- 配置调试器
- 使用版本控制
- 实现CI/CD
- 使用代码分析工具
- 使用虚拟环境

### 核心原则
- 遵循PEP标准
- 保持代码整洁
- 正确处理错误
- 使用适当的日志记录
- 实现监控
- 遵循插件化分层架构

## 记住
- 专注于可维护性
- 保持代码组织良好
- 正确处理错误
- 全面文档化
- 遵循NapcatBot的插件化分层架构设计
